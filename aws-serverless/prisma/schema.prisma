// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 binaryTargets = ["rhel-openssl-1.0.x", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Company {
  companyID     Int       @id @default(autoincrement())
  companyName   String
  contactPerson String
  contactEmail  String
  contactPhone  String
  address       String
  jobs           Job[]
}

model Driver {
  driverID    Int     @id @default(autoincrement())
  firstName   String
  lastName    String
  contactPhone  String
  jobs           Job[]
}


model Job {
  jobID           Int       @id @default(autoincrement())
  company         Company   @relation(fields: [companyID], references: [companyID])
  companyID       Int
  driver          Driver    @relation(fields: [driverID], references: [driverID])
  driverID        Int
  jobDescription  String
  scheduledDate   DateTime
  status          String
  dateCompleted   DateTime?
  wasteCollection WasteCollection?
}




model WasteCollection {
  collectionID    Int       @id @default(autoincrement())
 
  companyID       Int
  driverID        Int
  job             Job?      @relation(fields: [jobID], references: [jobID])
  jobID           Int?      @unique // Optional relation to job
  

  collectionDate  DateTime
  printName       String
  signatureData   String?   // Base64 encoded signature
  

  serviceItems    ServiceItem[]
  otherServices   OtherService[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ServiceType {
  serviceTypeID   Int       @id @default(autoincrement())
  serviceName     String    @unique
  possibleOptions String[]  // Array of possible checkbox options
  
  serviceItems    ServiceItem[]
}

model ServiceItem {
  serviceItemID   Int       @id @default(autoincrement())
  
  // Relations
  collection      WasteCollection @relation(fields: [collectionID], references: [collectionID], onDelete: Cascade)
  collectionID    Int
  serviceType     ServiceType @relation(fields: [serviceTypeID], references: [serviceTypeID])
  serviceTypeID   Int
  
  // Service details
  selectedOptions String[]  // Which options were checked (e.g., "serviced", "cleaned")
  units           Int       // Number of units
  
  @@unique([collectionID, serviceTypeID])
}

model OtherService {
  otherServiceID  Int       @id @default(autoincrement())
  collection      WasteCollection @relation(fields: [collectionID], references: [collectionID], onDelete: Cascade)
  collectionID    Int
  
  description     String
  units           Int
}